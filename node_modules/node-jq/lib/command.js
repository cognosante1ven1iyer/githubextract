'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commandFactory = exports.INPUT_STRING_ERROR = exports.INPUT_JSON_UNDEFINED_ERROR = exports.FILTER_UNDEFINED_ERROR = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _options = require('./options');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var JQ_PATH = process.env.JQ_PATH || _path2.default.join(__dirname, '..', 'bin', 'jq');

var FILTER_UNDEFINED_ERROR = exports.FILTER_UNDEFINED_ERROR = 'node-jq: invalid filter argument supplied: "undefined"';
var INPUT_JSON_UNDEFINED_ERROR = exports.INPUT_JSON_UNDEFINED_ERROR = 'node-jq: invalid json object argument supplied: "undefined"';
var INPUT_STRING_ERROR = exports.INPUT_STRING_ERROR = 'node-jq: invalid json string argument supplied';

var getFileArray = function getFileArray(path) {
  if (Array.isArray(path)) {
    return path.reduce(function (array, file) {
      (0, _utils.validateJSONPath)(file);
      return [].concat(_toConsumableArray(array), [file]);
    }, []);
  }
  (0, _utils.validateJSONPath)(path);
  return [path];
};

var validateArguments = function validateArguments(filter, json, options) {
  if (typeof filter === 'undefined') {
    throw new Error(FILTER_UNDEFINED_ERROR);
  }

  switch (options.input) {
    case 'json':
      if (typeof json === 'undefined') {
        throw new Error(INPUT_JSON_UNDEFINED_ERROR);
      }
      break;
    case 'string':
      if (!json) {
        throw new Error(INPUT_STRING_ERROR + ': "' + (json === '' ? '' : json) + '"');
      }
      break;
  }
};

var commandFactory = exports.commandFactory = function commandFactory(filter, json) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var mergedOptions = _extends({}, _options.optionDefaults, options);

  validateArguments(filter, json, mergedOptions);

  var args = [filter].concat(_toConsumableArray((0, _options.parseOptions)(mergedOptions)));
  var stdin = '';

  if (mergedOptions.input === 'file') {
    args = [].concat(_toConsumableArray(args), _toConsumableArray(getFileArray(json)));
  } else {
    if (mergedOptions.input === 'json') {
      stdin = JSON.stringify(json);
    } else {
      stdin = json;
    }
  }

  return {
    command: JQ_PATH,
    args: args,
    stdin: stdin
  };
};